{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { autoBind, If } from \"react-extras\";\nimport { Component, Fragment } from \"react\";\nimport { Dialog, Button, minorScale, TextInputField } from \"evergreen-ui\";\nimport { withRouter } from \"next/router\";\nimport { withData } from \"../../hocs/with-data\";\n\nconst isInvalid = value => {\n  if (value === null) {\n    return false;\n  }\n\n  return value.length === 0;\n};\n\nconst empty = value => {\n  return value === null || value.length === 0;\n};\n\nclass CreateRepoButton extends Component {\n  constructor(props) {\n    super(props);\n    autoBind(this);\n    this.state = {\n      showPrompt: false,\n      name: null,\n      localPath: null\n    };\n  }\n\n  componentDidUpdate({\n    showInitially: oldShowInitially\n  }) {\n    const {\n      showInitially,\n      defaultName\n    } = this.props;\n\n    if (showInitially && showInitially !== oldShowInitially) {\n      this.setState({\n        showPrompt: true,\n        name: defaultName\n      });\n    }\n  }\n\n  async createRepo() {\n    const {\n      createRepo,\n      router\n    } = this.props;\n    const {\n      name,\n      localPath\n    } = this.state;\n    const {\n      id\n    } = await createRepo({\n      name,\n      localPath\n    });\n    router.push(`/details?id=${id}`);\n  }\n\n  close() {\n    this.setState({\n      showPrompt: false,\n      name: null,\n      localPath: null\n    });\n  }\n\n  render() {\n    const {\n      value = \"New\",\n      hasIcon = true,\n      defaultName = null,\n      justModal = false\n    } = this.props;\n    const {\n      showPrompt,\n      name,\n      localPath\n    } = this.state;\n    const isConfirmDisabled = empty(name) || empty(localPath);\n    return __jsx(Fragment, null, __jsx(Dialog, {\n      confirmLabel: \"Create\",\n      intent: \"success\",\n      isConfirmDisabled: isConfirmDisabled,\n      isShown: showPrompt,\n      onCancel: this.close,\n      onConfirm: this.createRepo,\n      title: \"Create Repository\",\n      onCloseComplete: this.close\n    }, __jsx(TextInputField, {\n      autoFocus: true,\n      isInvalid: isInvalid(name),\n      label: \"Name\",\n      onChange: e => this.setState({\n        name: e.target.value\n      }),\n      placeholder: \"maxchehab/gh-code\",\n      required: true,\n      value: name,\n      validationMessage: isInvalid(name) ? \"This field is required\" : undefined\n    }), __jsx(TextInputField, {\n      isInvalid: isInvalid(localPath),\n      label: \"Local path\",\n      onChange: e => this.setState({\n        localPath: e.target.value\n      }),\n      placeholder: \"/home/projects/gh-code\",\n      required: true,\n      value: localPath,\n      validationMessage: isInvalid(localPath) ? \"This field is required\" : undefined\n    })), __jsx(If, {\n      condition: !justModal\n    }, __jsx(Button, {\n      appearance: \"primary\",\n      iconBefore: hasIcon ? \"git-repo\" : undefined,\n      intent: \"success\",\n      marginLeft: minorScale(3),\n      onClick: () => {\n        this.setState({\n          showPrompt: true,\n          name: defaultName\n        });\n      }\n    }, value)));\n  }\n\n}\n\nexport default withRouter(withData(CreateRepoButton));","map":null,"metadata":{},"sourceType":"module"}