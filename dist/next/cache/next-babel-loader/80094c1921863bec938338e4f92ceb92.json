{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport { autoBind } from \"react-extras\";\nimport { ulid } from \"ulid\";\nconst DataContext = React.createContext({\n  repos: {},\n  createRepo: async _repo => null,\n  deleteRepo: _repo => null,\n  findRepo: _id => null,\n  updateRepo: _repo => null,\n  updateFooter: _footer => null,\n  loaded: false,\n  footer: null\n});\n\nclass DataProvider extends Component {\n  constructor(props) {\n    super(props);\n    autoBind(this);\n    this.state = {\n      repos: {},\n      loaded: false,\n      footer: null\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      data\n    } = await browser.storage.local.get(\"data\");\n\n    if (!data) {\n      await browser.storage.local.set({\n        data: {\n          repos: {}\n        }\n      });\n      return this.setState({\n        loaded: true\n      });\n    }\n\n    this.setState(_objectSpread({}, data, {\n      loaded: true\n    }));\n  }\n\n  updateRepo(repo) {\n    const repos = _Object$assign(this.state.repos, {\n      [repo.id]: repo\n    });\n\n    this.setState({\n      repos\n    });\n    const data = {\n      repos\n    };\n    browser.storage.local.set({\n      data\n    });\n  }\n\n  async createRepo(repo) {\n    const id = ulid();\n    repo.id = id;\n\n    const repos = _Object$assign(this.state.repos, {\n      [id]: repo\n    });\n\n    this.setState({\n      repos\n    });\n    const data = {\n      repos\n    };\n    await browser.storage.local.set({\n      data\n    });\n    return repo;\n  }\n\n  findRepo(id) {\n    const {\n      repos\n    } = this.state;\n\n    if (!id) {\n      return null;\n    }\n\n    return repos[id];\n  }\n\n  deleteRepo({\n    id\n  }) {\n    const repos = _Object$assign(this.state.repos, {});\n\n    delete repos[id];\n    this.setState({\n      repos\n    });\n    const data = {\n      repos\n    };\n    browser.storage.local.set({\n      data\n    });\n  }\n\n  updateFooter(footer) {\n    this.setState({\n      footer\n    });\n  }\n\n  render() {\n    const {\n      children\n    } = this.props;\n    const {\n      repos,\n      loaded,\n      footer\n    } = this.state;\n    return __jsx(DataContext.Provider, {\n      value: {\n        repos,\n        createRepo: this.createRepo,\n        deleteRepo: this.deleteRepo,\n        updateRepo: this.updateRepo,\n        findRepo: this.findRepo,\n        updateFooter: this.updateFooter,\n        loaded,\n        footer\n      }\n    }, children);\n  }\n\n}\n\nconst DataConsumer = DataContext.Consumer;\nexport { DataProvider, DataConsumer, DataContext };","map":null,"metadata":{},"sourceType":"module"}